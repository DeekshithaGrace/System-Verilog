class generator;
  mailbox mbx;
  task run();
  for (int i=0;i<=4;i++) begin
    bit a=i[1];
    bit b=i[0];
    mbx.put({a,b});
    $display("generator test cases: a=%0b,b=%0b",a,b);
    end
  endtask
endclass 
class driver;
  mailbox mbx;
virtual inter vif;
  task run();
forever begin
    bit [1:0] temp;
    bit a,b;
  mbx.get(temp);
    a=temp[1];
  b=temp[0];
   vif.a=a;
vif.b=b;
#50;
  $display("driver applied values: a=%0b, b=%0b -> DUT OUTPUT: sum: %0b, carry: %0b",a,b,vif.sum,vif.carry);
end
  endtask
endclass      
 module tb;
  inter aif();
   ha dut(.a(aif.a), .b(aif.b), .sum(aif.sum), .carry(aif.carry));
generator gen;
driver div;
mailbox mbx;
initial begin
  gen=new();
  div=new();
  mbx=new();
gen.mbx=mbx;
div.mbx=mbx;
div.vif=aif;
fork
  gen.run();
  div.run();
join
end
endmodule
