class generator;
  mailbox mbx;
  task run();
    for (int i = 0; i < 8; i++) begin // only 0 to 7
      bit a = i[2]; // MSB
      bit b = i[1];
      bit c = i[0];
      mbx.put({a,b,c});
      $display("Generator test cases: a=%0b, b=%0b, c=%0b", a, b, c);
    end
  endtask
endclass
class driver;
  mailbox mbx;
  virtual inter vif;
  task run();
    forever begin
      bit [2:0] temp;
      bit a, b, c;
      mbx.get(temp);
      a = temp[2];
      b = temp[1];
      c = temp[0];
      vif.a = a;
      vif.b = b;
      vif.c = c;
      #50;
      $display("Driver applied values: a=%0b, b=%0b, c=%0b -> DUT OUTPUT: sum=%0b, carry=%0b", a, b, c, vif.sum, vif.carry);
    end
  endtask
endclass
module tb;
  inter aif();
  full_adder dut(.a(aif.a), .b(aif.b), .c(aif.c), .sum(aif.sum), .carry(aif.carry));
  generator gen;
  driver div;
  mailbox mbx;
  initial begin
    gen = new();
    div = new();
    mbx = new();
    gen.mbx = mbx;
    div.mbx = mbx;
    div.vif = aif;
    fork
      gen.run();
      div.run();
    join
  end
  initial begin
$dumpfile(" dump.vcd");
$dumpvars(1);
end
endmodule
