 //GENERATOR
//testbench
class generator;
  mailbox mbx;
  task run();
    for (int i = 0; i < 8; i++) begin // only 0 to 7
      bit a = i[2]; // MSB
      bit b = i[1];
      bit bin = i[0];// LSB
      mbx.put({a,b,bin});
      $display("Generator test cases: a=%0b, b=%0b, bin=%0b", a, b, bin);
    end
  endtask
endclass

// Driver
class driver;
  mailbox mbx;
  virtual inter vif;
  task run();
    forever begin
      bit [2:0] temp;
      bit a, b, bin;
      mbx.get(temp);
      a = temp[2];
      b = temp[1];
      bin = temp[0];
      vif.a = a;
      vif.b = b;
      vif.bin = bin;
      #50;
      $display("Driver applied values: a=%0b, b=%0b, bin=%0b -> DUT OUTPUT: difference=%0b, barrow=%0b", a, b, bin, vif.difference, vif.barrow);
    end
  endtask
endclass

// Testbench
module tb;
  inter aif();
  full_subtractor dut(.a(aif.a), .b(aif.b), .bin(aif.bin), .difference(aif.difference), .barrow(aif.barrow));
  generator gen;
  driver div;
  mailbox mbx;
  initial begin
    gen = new();
    div = new();
    mbx = new();
    gen.mbx = mbx;
    div.mbx = mbx;
    div.vif = aif;
    fork
      gen.run();
      div.run();
    join
  end
    initial begin
$dumpfile(" dump.vcd");
$dumpvars(1);
end
endmodule
